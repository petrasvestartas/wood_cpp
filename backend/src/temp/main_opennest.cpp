#include "stdafx.h"
#include "nest/nfp.h"
// temp

int main(int argc, char **argv)
{

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// viewer type and shader location
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	opengl_globals::shader_type_0default_1transparent_2shaded_3shadedwireframe_4wireframe_5normals_6explode = 3;
	opengl_globals::shaders_folder = "C:\\IBOIS57\\_Code\\Software\\CPP\\CMAKE\\super_build\\compas_wood\\viewer\\shaders\\";

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// add default geometry
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	opengl_globals_geometry::add_grid();

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// code
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	auto start = std::chrono::high_resolution_clock::now();

	std::vector<std::vector<std::vector<glm::vec3>>> pattern_glm;
	std::vector<std::vector<std::vector<glm::vec3>>> path_glm;
	std::vector<std::vector<std::vector<glm::vec3>>> nfp_glm;
	std::vector<std::vector<std::vector<glm::vec3>>> results;

	nest::nfps(pattern_glm, path_glm, nfp_glm, results);

	auto stop = std::chrono::high_resolution_clock::now();
	auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);
	std::cout << "Time taken by function: " << duration.count() << " ms" << std::endl;

	opengl_globals_geometry::polylines.add(pattern_glm, 5, colors::red, true, "mesh_outlines_clipper");
	opengl_globals_geometry::polylines.add(path_glm, 5, colors::blue, true, "mesh_outlines_clipper");
	opengl_globals_geometry::polylines.add(nfp_glm, 5, colors::green, true, "mesh_outlines_clipper");
	opengl_globals_geometry::polylines.add(results, 5, colors::black, true, "mesh_outlines_clipper");

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// render
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	opengl_render::render();

	return 0;
}
